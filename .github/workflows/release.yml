name: release-workflow-actions
run-name: ${{ github.actor }} is running release
on:
   push:
     tags:
       - 'v\d+'

jobs:
  create_issue:
    name: Create Release issue
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate change log
        id: get_tags
        run: |
          CURRENT_TAG=${{ github.ref_name }} 
          TIMESTAMP=$(git show -s --format=%ai ${CURRENT_TAG})
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${CURRENT_TAG}^)
          echo "current=${CURRENT_TAG}" >> "$GITHUB_ENV"
          echo "previous=${PREVIOUS_TAG}" >> "$GITHUB_ENV"
          echo "timestamp=${TIMESTAMP}" >> "$GITHUB_ENV"

      - name: Generate changelog
        id: generate_log
        run: |
          CHANGELOG=$(git log --pretty=format:"- %s" "${{ env.previous }}...${{ env.current }}")
          echo "log=${CHANGELOG}" >> "$GITHUB_ENV"

      - name: Create team sync issue
        uses: imjohnbo/issue-bot@3d96848fb5e9a4a473bb81ae62b4b4866a56e93a
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          assignees: "Beksultan2001"
          labels: "RELEASE"
          title: Release ${{ github.ref_name }} 
          body: |
            ### Это релиз приложения версии ${{ github.ref_name }}

            Авто релиза: ${{ github.actor }}

            Время: ${{ env.timestamp }}
            
            Changelog:

            ${{ env.log }}
            
          pinned: false
          close-previous: false

  manage_release:
    name: Manage Release
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Check if release already exists
        id: check_release
        run: |
          RESPONSE=$(curl \
            --silent \
            --request GET \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}")

          RELEASE_ID=$(echo $RESPONSE | jq '.id')
          echo ::set-output name=release_id::${RELEASE_ID}

      - name: Update Release
        if: steps.check_release.outputs.release_id != null
        run: |
          curl \
            --request PATCH \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json' \
            --data '{"body": "Updated body", "name": "Updated release name"}' \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}"

      - name: Create Release
        if: steps.check_release.outputs.release_id == null
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
