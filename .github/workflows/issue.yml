name: Issue
run-name: issue
on: [workflow_call]

jobs:
  issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write

    outputs:
      issue_number: ${{ steps.create_issue.outputs.result }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install auto-changelog
        run: npm i -g auto-changelog
        
      - name: Generate changelog
        run: auto-changelog --commit-limit false --template keepachangelog

      - name: Create Issue
        id: create_issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
          
            const fs = require('fs');
            const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
            const MAX_BODY_LENGTH = 4000;

            // Truncate the description if it exceeds the maximum length
            const truncatedDescription = changelog.length > MAX_BODY_LENGTH
              ? changelog.slice(0, MAX_BODY_LENGTH)
              : changelog;

            const [name, repo] = '${{ github.repository }}'.split('/');
            const version = '${{ github.ref_name }}';
            const title = `Release created By ${version}`;
            
            const issue = { name, repo, labels: ['RELEASE'] };

            const issues = await github.rest.issues.listForRepo({ ...issue, state: 'all' });
            const isThere = issues.data.find(i => i.title === title);
            if (isThere) {
              const update = { ...issue, issue_number: isThere.number, body: truncatedDescription, state: 'open' };
              await github.rest.issues.update(update);
              return isThere.number;
            } else {
              const create = { ...issue, title: title, body: truncatedDescription };
              const response = await github.rest.issues.create(create);
              return response.data.number;
            }

            
