name: Release process - Issue
run-name: issue
on: [workflow_call]

jobs:
  issue:
    runs-on: ubuntu-latest
    # needs: check-tests
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install auto-changelog
        run: npm i -g auto-changelog
      - name: Generate changelog
        run: auto-changelog --commit-limit false --template keepachangelog
      - name: Create 
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
          
            const fs = require('fs');

            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const version = process.env.GITHUB_REF;
            const title = `Release ${version}`;

            const changelogContent = fs.readFileSync('CHANGELOG.md', 'utf8');

            // Define a regular expression to match the content between the last two tags
            const regex = /## \[.*?\].*?\n([\s\S]*?)(?=## \[.*?\].*?\n|$)/g;

            // Find all matches in the changelog content
            const matches = Array.from(changelogContent.matchAll(regex));

            // Get the content between the last two tags
            let contentBetweenLastTwoTags;
            if (matches.length >= 2) {
              contentBetweenLastTwoTags = matches[matches.length - 2][1];
            } else if (matches.length === 1) {
              // If there's only one match, consider it as the last tag
              contentBetweenLastTwoTags = matches[0][1];
            } else {
              // If there are no matches, set an empty string
              contentBetweenLastTwoTags = '';
            }

            const issuesList = await github.rest.issues.listForRepo({ owner, repo, labels: ['RELEASE'], state: 'all' });
            const existingIssue = issuesList.data.find(issue => issue.title === title);

            if (existingIssue) {
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: existingIssue.number,
                body: contentBetweenLastTwoTags,
                state: 'open',
                labels: ['RELEASE'],
              });
            } else {
              await github.rest.issues.create({
                owner,
                repo,
                title,
                body: contentBetweenLastTwoTags,
                labels: ['RELEASE'],
              });
            }

            
